continue
errors[:base]?
errors[:base]
product_fields.all?
continue
@request.users
@request.product_what
@request
continue
session.reset
session
session.reset
session.reset!
          <%= render 'days_since' %>
continue
@store_active.class
@store_active
continue
@request
@request.status == 'autorizada'
continue
debugger
continue
params[:request][:payment_uploaded]
@request
@request.payment_uploaded
@request.authorisation_signed
@request
params[:request]
params
@request
continue
exit
@request.documents
@request.authorisation_signed
@request
continue
@request.authorisation_signed
@request
continue
 @request.payment_uploaded
continue
 @request.payment_uploaded
params[:request][:payment_uploaded] != nil
 @request.payment_uploaded
 @request
 @request.authorisation_signed
 @request
params[:request][:payment_uploaded] != nil
params[:request][:payment_uploaded]
params[:request][:authorisation_signed]
continue
params[:request][:payment_uploaded]
params
params[:request]
params
continue
params[:request][:authorisation]
params[:request][:authorisation_signed]
params
continue
@request.authorised
continue
@request.authorised
continue
@request.authorised
continue
params
params[:request][:authorised]
@request.authorised
continue
params[:request][:authorised]
params[:request]
params
continue
params[:confirmar]
params
continue
!(params[:request][:payment_uploaded].nil? && [:request][:authorisation_signed].nil?)
(params[:request][:payment_uploaded].nil? && [:request][:authorisation_signed].nil?)
params[:request][:authorisation_signed].nil? 
params[:request][:payment_uploaded].nil?
params[:request][:payment_uploaded] = nil?
params[:request][:payment_uploaded]
R
exit
@prospect
continue
@owner
continue
@billing
continue
Prospect.find(params[:prospect_id])
Prospect.find(params[:prospect_id]).is_nil?
Prospect.find(params[:prospect_id]).value
Prospect.find(params[:prospect_id])
Prospect.find(params[:prospect_id]).nil?
Prospect.find(params[:prospect_id])
continue
exit
continue
@billing
@owner
continue
@owner.billing_address
@owner
continue
@owner
continue
@owner
continue
current_user.role.name
current_user.role
@assigned.each{ |request| puts request.status}
@assigned.each do |request|
@assigned.first.status
@assigned.first
@assigned
continue
@assigned
a.first["design_type"]
a.first.design_type
a.first
a
a = @assigned.to_a
@assigned.class.to_a
@assigned.class
@assigned
continue
DesignRequest.last
manager_assigned.class
assigned.class
manager_assigned.first.product_type
manager_assigned.first
manager_assigned.class
manager_assigned = Request.where.not('status' => ['creada','expirada','cancelada']).joins(users: :role).where('roles.name' => 'manager')
assigned.first.design_type
assigned.first
assigned.class
assigned = DesignRequest.where.not('status' => ['concluida','expirada','cancelada']).joins(user: :role).where('roles.name' => 'designer')
Request.all.class
DesignRequest.all.class
DesignRequests.all.class
Designer.all.class
manager_assigned.first.product_type
manager_assigned.first
manager_assigned.class
manager_assigned = Request.where.not('status' => ['creada','expirada','cancelada']).joins(users: :role).where('roles.name' => 'manager')
manager_assigned = Request.where.not('status' => ['creada','expirada','cancelada']).joins(users: :role).where('roles.name' => (role))
assigned.first.design_type
assigned.first
assigned.class
assigned = DesignRequest.where.not('status' => ['concluida','expirada','cancelada']).joins(user: :role).where('roles.name' => 'designer')
assigned = DesignRequest.where.not('status' => ['concluida','expirada','cancelada']).joins(user: :role).where('roles.name' => (role))
requests.class
requests = DesignRequest.where.not('status' => ['concluida','expirada','cancelada'])
d.class
a.class
a.first.product_type
a.first
d.first.design_type
d.first
d
d = current_user.design_requests
a.first
a = current_user.requests.where.not('status' => ['creada','expirada','cancelada']).
Request.last
Request.last.users
Request.last
DesignRequest.last
a.first.users
a.first.user
a.first.user_id
a.first
a.first.product_type
a.first
a
a = current_user.requests.where.not('status' => ['creada','expirada','cancelada'])
@assigned.first.design_type
@assigned.first-design_type
@assigned
continue
current_user.requests.where.not('status' => ['creada','expirada','cancelada']).first.product_type
current_user.requests.where.not('status' => ['creada','expirada','cancelada']).first
current_user.requests.where.not('status' => ['creada','expirada','cancelada'])
@assigned.last["design_type"]
@assigned.last.request.store_code
@assigned.last.request
@assigned.last
@assigned.first
@assigned.last["design_type"]
@assigned.last[design_type]
@assigned.last[attribute_design_type]
@assigned.last
@assigned.second
@assigned.first
@assigned.first.find
@assigned.first.find(design_type)
@assigned.first.first
@assigned.first
@assigned.first.attributes["cost"]
@assigned.first.attributes
@assigned.first.attributes[:design_type]
@assigned.first.attributes["design_type"]
@assigned.first.attributes[design_type]
@assigned.first.attributes.design_type
@assigned.first.attributes
@assigned.first.attribute
@assigned.first
@assigned
b = user.design_requests.where.not('status' => ['concluida','expirada','cancelada'])
b =   DesignRequest.where.not('status' => ['concluida','expirada','cancelada'])
b =  DesignRequest.where.not('status' => ['concluida','expirada','cancelada'])
DesignRequest.where.not('status' => ['concluida','expirada','cancelada'])
a.type_of
a.type
a = @assigned.to_a
@assigned.to_a.type
@assigned.to_a
@assigned.each{ |request| puts request.design_type}
@assigned 
continue
DesignRequest.where.not('status' => ['concluida','expirada','cancelada']).to_a.first.design_type
DesignRequest.where.not('status' => ['concluida','expirada','cancelada']).to_a.first
DesignRequest.where.not('status' => ['concluida','expirada','cancelada']).to_a
DesignRequest.where.not('status' => ['concluida','expirada','cancelada'])
DesignRequest.where.not('status' => ['concluida','expirada','cancelada']).map{ |x| x}
y
y.each{ |y| puts y.design_type}
y.count
y
y = DesignRequest.where.not('status' => ['concluida','expirada','cancelada']).map{ |x| x}
y = DesignRequest.where.not('status' => ['concluida','expirada','cancelada'])
w
w = y.map{ |x| x}
y = DesignRequest.where.not('status' => ['concluida','expirada','cancelada'])
z
z.map{ |x| x }.each{ |request| request.design_type}
z.map{ |x| x }
z
z = Request.where.not('status' => ['creada','expirada','cancelada'])
a.each{ |request| request.design_type }
a.each do{ |request| request.design_type }
a
a = @assigned.to_a
@assigned.to_a
@assigned.to_a.each{ |request| request.each{ |inside| inside.design_type } }
@assigned.to_a.each{ |request| request.each{ |inside| inside.design_type }}
@assigned.to_a.each{ |request| request.each{ |inside| inside.design_type } }
@assigned.to_a.each{ |request| request.each { |inside| inside.design_type } }
@assigned.to_a.each{ |request| request.each { |inside| inside.design_type }
@assigned.to_a.each{ |request| request.design_type }
@assigned.to_a
@assigned.to_h
@assigned
@assigned.each{ |request| request.id }
