continue
AGRUPADORES[@q_group]
@q_group
q_group
@unit_value
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
exit
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
exit
@num_length % 3
@num_length
@num_dec
@q_group
@quantity_in_letters
exit
@quantity_in_letters
exit
@quantity_in_letters
exit
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
exit
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
exit
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@q_group - 1
@q_group
@unit_value
@num_length
AGRUPADORES[4]
continue
num_unit
@num_length
UNIDADES[num_unit]
num_unit
num_unit = @num_s[0].to_i
num_unit = @num_s[0]
num_unit.to_i
num_unit
UNIDADES[num_unit.to_i]
UNIDADES[num_unit]
UNIDADES[num_unit].to_i
num_unit = @num_s[0]
@num_s[0]
@num_s
@num_unit
continue
@num_unit
@order
continue
@num_unit
@order
continue
@q_dec
continue
slice_in_dec = @num_s.slice(first..second).to_i
second = first + 1
first = @num_length - result
result = 2 + (3 * (@q_dec - 1))
continue
@decimals
@decimals += '/100'
@decimals
@decimals + '/100'
@decimals
continue
@num_cent
@q_cent
continue
next_two = @num_s.slice((number + 1)..(number + 2)).to_i
position = @num_s[number].to_i
number = @num_length - (@q_cent * 3)
@q_cent = @num_cent
@q_cent
continue
@q_dec
@order
@quantity_in_letters
continue
@num_dec
continue
@q_dec
continue
@q_dec
@qdec
@order
continue
@num_length / 3
@num_length
@num_dec
@num_cent
@num_s
continue
num_decimals
last_num
first_dec
@num_length
continue
params
continue
params
continue
params
continue
request.users.count
request.users
reques.users
roles
request.users.joins(:role).where('roles.name' => roles)
request.users.joins(:role).where('roles.name' => roles
user
continue
pending_order
entry.fix_quantity
continue
pending_order
entry
continue
entry
continue
entry.fix_quantity
entry
continue
@entries
exit
continue
movement
continue
order_quantity
inventory.fix_quantity
inventory
continue
@product_request
continue
inventory
inventory.fix_quantity
entry.fix_quantity
entry_fix.quantity
continue
create_movement
PendingMovement.last
pending_order
continue
inventory.fix_quantity
order_quantity
continue
params
continue
@product_request
continue
@product_request
continue
@product_request
continue
@product_request
continue
PendingMovement.last
Movement.last
continue
@product_request
continue
ProductRequest.find(55)
ProductRequest.last
@product_request
continue
@product_request
params
continue
DeliveryAddress.find(params[:order][:delivery_address]).to_i
'una rata vieja que era planchadora'.to_i
'otro'.to_i
'otra'.to_i
'otra'.to_i == true
'otra'.to_i = true
'otra'.to_i.true?
'otra'.to_i.nil?
address
address = DeliveryAddress.find(params[:order][:delivery_address])
'otra'direcci√≥n'.to_i
'16'.to_i
DeliveryAddress.find(params[:order][:delivery_address])
continue
notes
address
continue
notes
address
params
continue
params
continue
params
continue
Order.find(a)
Order.where(status: a)
@orders
a
continue
a
result
continue
ProductRequest.where(status: 'sin asignar')
continue
@order
continue
@order
