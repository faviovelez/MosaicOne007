exit
params[:orders] == nil
params[:orders]
exit
params[:tickets]
params
continue
exit
params
exit
params
exit
params[:tickets]
params
exit
params
exit
params
continue
@difference
continue
@difference
hello
@difference
continue
@difference
continue
@difference
@ticket_total
continue
@difference = 0
get_returns_or_changes(ticket)
continue
    end
      difference << ticket.total
    ticket.children.each do |ticket|
difference = []
    @difference
    difference == nil ? @difference = 0 : @difference == difference
    difference = difference.inject(&:+)
    end
      difference << ticket.total
    ticket.children.each do |ticket|
    difference = []
ticket.total
get_returns_or_changes(ticket)
ticket
@difference
exit
Movement.last
Movement.last.update(quantity: nil)
Movement.last
Movement.last.update(quantity: Movement.last.product_id)
Movement.last
c
c = 'hello'
Movement.last
Movement.last.update(movement_type: 'ventota')
Movement.last
self
Movement.last
Movement.last.dup.save
Movement.last.dup
m = Movement.last.dup
Movement.last.dup
def remove_attributes(attributes)
self
Movement.last
exit
self.movement_type
self.quantity
self
exit
Movement.last.movement_type
Movement.last.quantity
Movement.last
exit
@product_request.movements
continue
@product_request.movements
@product_request
continue
@orders.each{ |order| order.update(confirm: true)}
@orders = Order.find(params[:ids].split('/'))
Order.find(params[:ids].split('/'))
continue
exit
self
self.update(quantity: total_quantity, entry_movement: mov, total_cost: self.cost * total_quantity, discount_applied: (self.discount_applied * total_quantity).round(2), automatic_discount: (self.automatic_discount * total_quantity).round(2), taxes: (self.taxes * total_quantity).round(2), subtotal: (self.subtotal * total_quantity).round(2), total: (self.subtotal * total_quantity).round(2) - (self.discount_applied * total_quantity).round(2) + (self.taxes * total_quantity).round(2))
self.update(quantity: total_quantity, entry_movement: mov, total_cost: self.cost * total_quantity, discount_applied: (self.discount_applied * total_quantity).round(2), automatic_discount: (self.automatic_discount * total_quantity).round(2), taxes: (self.taxes * total_quantity).round(2), subtotal: (self.subtotal * total_quantity).round(2), total: (self.subtotal * total_quantity).round(2) - (self.discount * total_quantity).round(2) + (self.taxes * total_quantity).round(2))
self.update(quantity: total_quantity, entry_movement: mov, total_cost: self.cost * total_quantity, discount_applied: (self.discount * total_quantity).round(2), automatic_discount: (self.discount * total_quantity).round(2), taxes: (self.taxes * total_quantity).round(2), subtotal: (self.subtotal * total_quantity).round(2), total: (self.subtotal * total_quantity).round(2) - (self.discount * total_quantity).round(2) + (self.taxes * total_quantity).round(2))
                    )
                    total: (self.subtotal * total_quantity).round(2) - (self.discount * total_quantity).round(2) + (self.taxes * total_quantity).round(2)
                    subtotal: (self.subtotal * total_quantity).round(2),
                    taxes: (self.taxes * total_quantity).round(2),
                    automatic_discount: (self.discount * total_quantity).round(2),
                    discount_applied: (self.discount * total_quantity).round(2),
                    total_cost: self.cost * total_quantity,
                    entry_movement: mov,
                    quantity: total_quantity,
        self.update(
self.update
total_quantity
self
mov_sales.include?(Movement.last)
mov_sales << Movement.last unless mov_sales.include?(Movement.last)
mov_sales.include?(Movement.last)
mov_sales = entry.movement.sales
mov = entry.movement
total_quantity >= entry.fix_quantity
entry.fix_quantity
entry = related_warehouses(order_type).first
total_quantity
related_warehouses(order_type).first
related_warehouses(order_type)
exit
(self.subtotal * entry.fix_quantity).round(2)
self.subtotal * entry.fix_quantity
self.subotal * entry.fix_quantity
entry.fix_quantity
self.subtotal * 10
self.subtotal * 2
self.subtotal
Movement.last.product
Movement.last
self.discount_applied
Movement.last.discount_applied
m = Movement.last.discount_applied
m = Movement.last
Movement.last
m = Movement.last
m
m.discount_applied
entry.movement.fix_cost * entry.fix_quantity
entry.fix_quantity
entry.movement.fix_cost
entry.fix_quantity
entry
entry = related_warehouses(order_type).first
Movement.last
mov
mov = related_warehouses(order_type).first.movement
related_warehouses(order_type).first.movement
related_warehouses(order_type).first
related_warehouses(order_type)
order_type
self
continue
self
continue
related_warehouses(order_type).first.movement.fix_cost
related_warehouses(order_type).first.movement.fix_quantity
related_warehouses(order_type).first.movement
related_warehouses(order_type).first
self
continue
cl t
pp Movement.last
Movement.last
continue
Movement.last
continue
Movement.last
continue
Movement.find(73)
Movement.last
exit
Movement.last
self
exit
self.discount_applied
self.cost
self
exit
entry.movement
mov
self
continue
temp_quantity = total_quantity
self.update(quantity: total_quantity)
mov << Movement.last unless mov.include?(Movement.last)
mov = entry.movement.sales
exit
mov << Movement.last unless mov.include?(Movement.last)
Movement.last
mov = entry.movement.sales_movements
mov
exit
exot
mov
mov << Movement.last unless mov.include?(Movement.last)
mov = entry.movement.sales_movements
self.quantity
self
entry.fix_quantity
total_quantity 
Mototal_quantity 
continue
related_warehouses(order_type).first.fix_quantity
related_warehouses(order_type).first
mov = related_warehouses(order_type).first.movement.sales_movements
Movement.last
mov
mov = related_warehouses(order_type).first.movement.sales_movements
mov = related_warehouses(order_type).first.movement
total_quantity
related_warehouses(order_type).first.quantity
related_warehouses(order_type).first
}
related_warehouses(order_type)
related_warehouses
continue
is_sales?
continue
exit
store
type
cost
movement_type
is_sales?
continue
is_sales?
exit
!!(movement_type == 'venta')
continue
!!(movement_type == 'venta')
exit
attributes
continue
exit
Store.last
last_series
continue
past[new_id]
past
new_id
id
continue
sale
continue
exit
quantity
@past_sale
sale
continue
exit
exot
sale
critic_stock
low
months
critic
continue
quantity
continue
quantity
