continue
exit
Inventory.last
self
exit
response_hash
continue
exit
response_hash
continue
exit
response_hash
continue
exit
response_hash = response.hash
response = client.call(:stamp, message: { xml: xml_file, username: username , password: password })
request
response_hash
exit
hash
exit
hash
exit
hash = response_hash[:envelope][:body][:stamp_response][:stamp_result]
hash[:xml]
exit
xml_response = hash[:xml]
hash = response_hash[:envelope][:body][:sign_stamp_response][:sign_stamp_result]
response_hash = response.hash
response = client.call(:sign_stamp, message: { xml: xml_file, username: username , password: password })
request = ops.build(message: { xml: xml_file, username: username , password: password })
ops = client.operation(:sign_stamp)
file
ENV['password_pac']
ENV['username_pac']
xml_response
continue
ENV['stamp_dir']
exit
xml_response
continue
@summaries.first
continue
@objects
@bill
exit
params
@bill
(orders == nil && @bill == nil)
(tickets == nil && @bill == nil)
@objects
objects
continue
@cod_status
continue
prospect
exit
prospect.class == Array
prospect.class
prospect
continue
@receipt = File.open(File.join(@final_dir, 'acuse.xml'), 'r')
@receipt = File.open(File.join(@final_dir, 'acuse.xml') 'r')
@receipt = File.open(File.join(@final_dir, 'acuse.xml')
receipt_file = File.open(File.join(@final_dir, 'acuse.xml'), 'w'){ |file| file.write(xml_receipt) }
receipt_extract
xml_receipt
receipt_extract
@final_dir
receipt_extract = xml_receipt.document.children.children.children
xml_receipt = Nokogiri::XML(receipt)
receipt = response_hash[:envelope][:body][:cancel_response][:cancel_result][:acuse]
response_hash = response.hash
continue
response_hash[:envelope][:body][:cancel_response][:cancel_result][:acuse]
response_hash[:envelope][:body][:cancel_response][:cancel_result]
response_hash[:envelope][:body][:cancel_response]
response_hash = response.hash
response.hash
response_hash[:envelope][:body][:cancel_response][:cancel_result]
receipt
response.hash
response
exit
@bill.rows.first
row = @bill.rows.select{|row| row.product == id}.first
id = product.id
product = Product.find(products_filtered[n])
unique_code
@bill.rows.first.product
@bill.rows.first
@bill.rows
@bill.rows.select{|row| row.product == unique_code}
unique_code = product.unique_code.to_i
@bill.rows.select{|row| row.product == unique_code.to_i}
unique_code
@bill.rows.select{|row| row.product == unique_code}
@bill.rows
@bill.rows.first.product
@bill.rows.first
@bill.rows
@bill.rows.select{|r| r.product == unique_code}
@bill.rows
unique_code
row = @bill.rows.select{|row| row.product == unique_code}
row = @bill.rows.select{|row| row.product == unique_code}.first
unique_code = product.unique_code
product = Product.find(products_filtered[n])
unique_code
product
pp @bill.rows
@bill.rows
@bills.rows
row
product
n
quantities_filtered
products_filtered
params[:products]
params[:quantities]
continue
hash
continue
(@general_bill == false && @relation_type == '')
(@general_bill == true && @relation_type == '')
exit
(@general_bill == false && @relation_type == '')
(@general_bill == true && @relation_type == '')
@relation_type
@general_bill
exit
hash
continue
exit
hash
continue
exit
@bill.uuid
@bill
@relation_type
hash
hash[:xml]
continue
@total_discount
@discount
@total_taxes
@taxes
@subtotal
@total
continue
@subtotal
continue
@subtotal
@total
continue
exit
@total
continue
@rows
continue
exit
@total_taxes
@rows.first.taxes
@rows.first.subtotal
@rows.first.total
@rows.first
@rows
@row
@bill
@total_taxes
@subtotal
@total
@rows
continue
@rows
continue
exit
@rows
@subtotal
@total
continue
@total_taxes
@total
continue
@rows
continue
@subtotal
continue
exit
exkt
@bill
@subtotal
@total
continue
exit
params[:cfdi_type]
@bill.bill_type
continue
exit
@subtotal
@total
@total_discount
@rows.first
@subtotal
@total_taxes
@total
continue
@rows.first
@rows.frst
@rows
continue
exit
@rows.sat_key
@rows
@rows.first
@rows
continue
exit
params[:amount]
continue
params
continue
@relation_type
params
continue
exit
@bill.bill_type == 'global'
@bill.bill_type == 'global' ?
@cfdi_type
continue
@cfdi_type
@cfdi_tye
continue
@bill.bill_type == 'global'
@bill_type
@bill
exit
@bill.bill_type
@bill
@cfdi_type
params[:cfdi_type]
exit
params[:quantities].each_with_index{ |k,v| v == '0'}
params[:quantities].each_with_index{ |k,v| k == '0'}
params[:quantities].each_with_index{ |k,v| k == 0}
params[:quantities].each_with_index{ |k,v| v == 0}
params[:quantities]
@bill.rows.count
@rows.count
pp row
row.unit_value
row = @bill.rows.select{ |element| element.product == 550 }.first
row = @bill.rows.select{ |element| element.product == 550 }.first.unit_value
row = @bill.rows.select{ |element| element.product == 550 }.first
row.first.unit_value
row.first
