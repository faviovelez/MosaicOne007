continue
exit
@prosect.id
@prosect.id.to_s
@prospect.id.to_s
@prospect.id
rule.prospect_list
rule.prospect_list.include?(@prosect.id.to_s)
rule
@prospect.id.to_s
@prospect.id
@prospect
exit
@products.where(line: names)
names
Classification.find(lines).each{ |c| names << c.name }
lines
params[:discount_rule][:line_filter].each{ |line| lines << line unless line == ''}
params[:discount_rule][:line_filter]
params[:discount_rule][:line_filter].each do |line|
        end
          lines << line unless line == ''
        params[:discount_rule][:line_filter].each do |line|
        end
          lines << line unless line == ''
params[:discount_rule][:line_filter].each do |line|
lines = []
names = []
params
@products
@products.count
exit
rule
continue
@products.count
continue
@products.count
exit
@products
names
continue
names
Material.find(materials)
materials
continue
materials
continue
params[:discount_rule][:material_filter].present?
continue
filter_field
ids == ['']
ids == [']
ids
exit
ids
continue
reverse
reverse.pop
reverse = @lines.reverse
@lines
@lines.reverse
@lines
continue
params
status
exit
params[:discount_rule][:active]
params[:discount_rule]
params
exit
params[:store][:zip_code]
params[:store]
params
@store
params
@store.zip_code
exit
@@value
continue
@@value
continue
exit
value
continue
value
@value
continue
value
@value
continue
value
continue
SatZipcode.find_by_zipcode(@store.zip_code) ? value = true : value = false
value
SatZipcode.find_by_zipcode('20130') ? value = true : value = false
value
SatZipcode.find_by_zipcode(@store.zip_code) ? value = true : value = false
exit
continue
zip_code=(value)
@zip_code
zip_code
exit
self.zip_code
zip_code
continue
store[:zip_code]
self[:zip_code]
@store
Store.last
Store.LAST
Store
store
#<Store:0x007fa838483810>
SatZipcode.find_by_zipcode(zip_code)
SatZipcode.find_by_zipcode(:zip_code)
zip_code
:zip_code
:zip_code.value
:zip_code
store.zip_code
store
SatZipcode.find_by_zipcode('20130')
SatZipcode.find_by_zipcode(zip_code)
self.zip_code
zip_code
zipcode
store
@store
params
self.zip_code
zip_code
zipcode
exit
ids == ['']
ids.present?
ids
ids.blank?
filter = params[:discount_rule][:product_filter]
ids = params[:discount_rule][:product_list]
params
exit
params
exit
params
continue
current_user.store.id
current_user.store
params
continue
@discount_rule
continue
@discount_rule
continue
@discount_rule
continue
@discount_rule
continue
@discount_rule
continue
@discount_rule.product_list
@discount_rule
continue
params[:discount_rule][:product_list].second
params[:discount_rule][:product_list].first
params[:discount_rule][:product_list]
params
continue
params
continue
params
continue
Product.find(10)
params
continue
options
continue
continue√ß
options
continue
o
continue
options
continue
AGRUPADORES[@q_group]
@q_group
q_group
@unit_value
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
exit
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
exit
@num_length % 3
@num_length
@num_dec
@q_group
@quantity_in_letters
exit
@quantity_in_letters
exit
@quantity_in_letters
exit
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
exit
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
exit
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
@quantity_in_letters
continue
