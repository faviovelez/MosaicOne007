continue
@rows
continue
@total
@total_payment
@payments.length
continue
@all_payments.first.credit_days
@all_payments.first
@all_payments.where(credit_days: nil)
@all_payments.first
@all_payments.count
@all_payments
continue
@billing
continue
params
continue
@billing
continue
rows
@rows
continue
rows
@rows
continue
@rows.first
@rows
@row
continue
@prospect.billing_address
@prospect
continue
x
y
continue
y
x
array.length
array.lenght
array
y
x
continue
y
x
continue
x
x = 0
x
n
m
n
array.length
array
arrau
@prospects_equal
@ticket_prospects
variable
continue
@ticket_prospects
continue
@tickets
continue
@tickets_selected = params[:tickets_selected].split('/')
@tickets_selected
params[:tickets_selected].split('/')
params[:tickets_selected].splict('/')
[params[:tickets_selected]]
params[:tickets_selected]
params[:tickets:selected]
params
continue
tickets
@tickets
params
continue
params[:tickets_selected].split('/')
params[:tickets_selected]
params
@tickets_two
continue
@tickets
continue
@tickets
continue
@tickets_selected
continue
@tickets_selected
debugger
tickets
continue
tickets
continue
@tickets_selected.count
@tickets_selected
continue
tickets
continue
params
continue
params[:tickets]
params
continue
params
continue
@prospect
continue
@cfdi_use
@prospect
continue
@tickets
@cfdi_use
@prospect
continue
params[:bill]
continue
params
continue
params
continue
params[:bill]
params
continue
params[:bill][:prospect_id]
params[:bill][:prospect]
params[:bill][:status]
 params
continue
params
continue
params
continue
exit
@prosect.id
@prosect.id.to_s
@prospect.id.to_s
@prospect.id
rule.prospect_list
rule.prospect_list.include?(@prosect.id.to_s)
rule
@prospect.id.to_s
@prospect.id
@prospect
exit
@products.where(line: names)
names
Classification.find(lines).each{ |c| names << c.name }
lines
params[:discount_rule][:line_filter].each{ |line| lines << line unless line == ''}
params[:discount_rule][:line_filter]
params[:discount_rule][:line_filter].each do |line|
        end
          lines << line unless line == ''
        params[:discount_rule][:line_filter].each do |line|
        end
          lines << line unless line == ''
params[:discount_rule][:line_filter].each do |line|
lines = []
names = []
params
@products
@products.count
exit
rule
continue
@products.count
continue
@products.count
exit
@products
names
continue
names
Material.find(materials)
materials
continue
materials
continue
params[:discount_rule][:material_filter].present?
continue
filter_field
ids == ['']
ids == [']
ids
exit
ids
continue
reverse
reverse.pop
reverse = @lines.reverse
@lines
@lines.reverse
@lines
continue
params
status
exit
params[:discount_rule][:active]
params[:discount_rule]
params
exit
params[:store][:zip_code]
params[:store]
params
@store
params
@store.zip_code
exit
@@value
continue
@@value
continue
exit
value
continue
value
@value
continue
value
@value
continue
value
continue
SatZipcode.find_by_zipcode(@store.zip_code) ? value = true : value = false
value
SatZipcode.find_by_zipcode('20130') ? value = true : value = false
value
SatZipcode.find_by_zipcode(@store.zip_code) ? value = true : value = false
exit
continue
zip_code=(value)
@zip_code
zip_code
exit
self.zip_code
zip_code
continue
store[:zip_code]
self[:zip_code]
@store
Store.last
Store.LAST
Store
store
#<Store:0x007fa838483810>
SatZipcode.find_by_zipcode(zip_code)
SatZipcode.find_by_zipcode(:zip_code)
zip_code
:zip_code
:zip_code.value
:zip_code
store.zip_code
store
SatZipcode.find_by_zipcode('20130')
SatZipcode.find_by_zipcode(zip_code)
