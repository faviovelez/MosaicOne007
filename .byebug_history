continue
@total_payment
continue
exit
@total_payment
continue
exit
@total_payment.round(2)
@total_payment
@payments
@list_of_payments
@list_of_real_payments
@greatest_payment
continue
params
exit
continue
exit
info.each_with_index{ |value,index| cad << "#{value} = '#{reg.send(value)}'", cad << "AND " unless index == info.length - 1 }
info.each_with_index{ |value,index| [cad << "#{value} = '#{reg.send(value)}'", cad << "AND " unless index == info.length - 1 ]}
cad = ''
information
information.present?
information = tables_find_parameters[reg.class.to_s]
tables_find_parameters[reg.class.to_s]
info = tables_find_parameters[reg.class.to_s]
tables_find_parameters = params_find()
tables_find_parameters
reg.class.to_s
reg.class
reg
tables_find_parameters[reg.class.to_s]
params_find()
reg
continue
params
exit
pp params
exit
pp params
params
exit
@ids_references
values["object"]["user_id"]
exit
values
exit
values["object"]["user_id"].present?
values["object"]["user_id"]
values["object"]["email"]
values["object"]
values["email"]
values[:email]
values.try(:email)
values.try(:id)
values.try(:user_id)
values.user_id
values.class
values
exit
info = tables_find_parameters[reg.class.to_s]
tables_find_parameters = params_find()
info = tables_find_parameters[reg.class.to_s]
tables_find_parameters[reg.class.to_s]
params_find()
reg
continue
@test
@test = true
@test
continue
date.end_of_day
params[:date]
date.midnight
datemidnight
date
exit
date
date = Date.parse(date[:date])
real_date = Date.parse(date[:date])
date[:date]
date
exit
current_user.store.tickets.where(created_at: date.midnight..date.end_of_day) == []
current_user.store.tickets.where(created_at: date.midnight..date.end_of_day)
date += 1.day
date
current_user.store.tickets.where(created_at: date.midnight..date.end_of_day)
date += 1.day
date
@cash[1]
@cash[1] += a
@cash[1]
a = 5
@cash = ['Efectivo', 0]
pp Ticket.first
Ticket.first
pp Ticket.first.store_movements.first
Ticket.first.store_movements.first
Ticket.first.store_movements
@month_tickets.countT
@month_tickets = current_user.store.tickets.where(created_at: date.beginning_of_month.midnight..Time.now)
Ticket.first.created_at.class
Ticket.first.created_at
Time.now
date.beginning_of_month.midnight
date.midnight
date.beginning_of_month.to_datetime
date.beginning_of_month
date.begining_of_month
begining_of_monthdate
date.month_begining_of_month
date.month
date
pp PaymentForm.all
PaymentForm.all
PaymentForm.all.each do |pay|
Payment.first
current_user.store.tickets.where(created_at: date.midnight..date.end_of_day)P
date
current_user.store.tickets.where(created_at: date)
date = Date.parse(params[:date])
continue
exit
Ticket.laste
current_user.store.tickets.where(created_at: date)
date = Date.parse(params[:date])
current_user.store.tickets.where('created_at ?' > params[:date].to_date)
current_user.store.tickets.where(created_at: params[:date].to_date)
params[:date].to_date
params[:date]
current_user.store.tickets.where(created_at: params[:date])
current_user.store.tickets
current_user
params[:date]
exit
params
continue
exit
(self.classification = 'de tienda' || self.classification = 'especial')
exit
ChangesToTable.where(table: self.class.name.downcase.pluralize, web_id: self.id) == []
ChangesToTable.where(table: self.class.name.downcase.pluralize, web_id: self.id)
ChangesToTable.where(table: self.class.name.downcase.pluralize, web_id: self.id).count > 0
continue
prospect
@prospect
continue
exit
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).first.update(store: store)
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).first
store = BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).first.prospects.first.store
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).first.prospects.first.store
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).first.prospects.first
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).first.prospects.store
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).first.prospects
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).first
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc'])
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).prospects
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).prospects.first
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc'])
BillingAddress.where(store: @store, rfc: params['prospect_rfc'])
BillingAddress.where(business_name: store: @store, rfc: params['prospect_rfc'])
BillingAddress.where(business_name: params['prospect_name'], store: @store, rfc: params['prospect_rfc'])
continue
exit
continue
@prospect.billing_address
@prospect
continue
exit
Store.find(12).prospects.each do |p|
Store.find(12).prospects.where(billing_address: nil).count
Store.find(12).prospects.where(billing_address: nil)
Store.find(12).prospects
bl.first.prospects.count
bl.first.prospects
bl.first
bl
bl = BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc'])
bl = BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).prospects
bl = BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc'])
bl = BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).count
bl = BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc'])
Prospect.where(legal_or_business_name: params['prospect_name'])
Prospect.where(legal_or_business_name: params['params['prospect_name']]
pp Prospect.last
Prospect.last
bl = BillingAddress.where(business_name: params['prospect_name'], store: @store, rfc: params['prospect_rfc'])
continue
@prospect
continue
@prospect.billing_address
@prospect
continue
bl.count
bl = BillingAddress.where(business_name: params['prospect_name'], store: @store, rfc: params['prospect_rfc'])
params
exit
params[:tickets]
exit
params
continue
exit
@objects
@rows
continue
@rows
continue
exit
hash["sat_unit_description"] = Service.find_by_unique_code(params["unique_code"][n].split(' ').first).sat_unit_key.description
hash["sat_unit_key"] = Service.find_by_unique_code(params["unique_code"][n].split(' ').first).sat_unit_key.unit
Service.find_by_unique_code(params["unique_code"][n].split(' ').first).sat_key.sat_key
Service.find_by_unique_code(params["unique_code"][n].split(' ').first)
          debugger
continue
exit
params[:store][:prospects_file]
params[:store]
params[:store][:prospects]
params[:store]
params
roble@disenosdecarton.com.mx
continue
pp @rows
@rows
@bill.rows.each{ |row| }
@bill.rows
@bill
@type_of_bill_key
@discount_any
@rows
exit
BillingAddress.find_by_business_name(params['prospect_name']).prospects.first
BillingAddress.find_by_business_name(params['prospect_name']).prospects
BillingAddress.find_by_business_name(params['prospect_name'])
BillingAddress.find_by_business_name(params['prospect_name']).first.prospect
pp params
continue
exit
@rows
continue
exit
@relation_type
continue
exit
PaymentForm.find(params['payment'])
TypeOfBill.find(params["type_of_bill"])
pp params
CfdiUse.find(params['cfdi_use'])
Prospect.find(params['prospect_name']).first
BillingAddress.find(params['prospect_name'])
BillingAddress.find(params['prospect_name']).prospects.first
Store.find(params['store_name']).first
pp params
continue
