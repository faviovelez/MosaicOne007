exit
@ids_references[table_name.singularize].value
@ids_references[table_name.singularize]
@ids_references[table_name.singularize][value.to_s]
table_name.singularize.camelize.constantize.find(attr.last)
@ids_references[table_name.singularize].nil?
@ids_references[table_name.singularize]
 @ids_references
table_name
table_name = attr.first.gsub(/_id/,'')
@ids_references
attr.first
attr.last
attr.first
values[:object]
attr
reg
continue
reg
exit
reg
continue
attr
continue
attr
continue
attr
values[:object]
continue
values[:object]
attr
continue
attr
values[:object]
attr
atter
continue
values[:object]
attr
reg
continue
tables_find_parameters[reg.class.to_s]
info = tables_find_parameters[reg.class.to_s]
tables_find_parameters[reg.class.to_s]
info = tables_find_parameters[reg.class.to_s]
tables_find_parameters
tables_find_parameters = params_find()
reg.class.to_s
reg.class
reg
continue
attr
values[:object]
continue
attr
values[:object]
continue
values[:object]
attr
continue
attr
values[:object]
continue
values[:object]
reg
attr
continue
Ticket.last
StoreSale.last
self
continue
StoreSale.last
self
StoreSale.last
continue
StoreSale.last
self
continue
self
continue
self
continue
self
continue
self
continue
self
continue
self
continue
self
StoreSale.last
continue
StoreSale.last
self
continue
self
continue
(self.movement_type == 'venta' || self.movement_type == 'devolución')
self
continue
self
continue
self
continue
self
continue
(self.movement_type == 'venta' || self.movement_type == 'devolución')
self
continue
(self.movement_type == 'venta' || self.movement_type == 'devolución')
self.movement_type
self
continue
exit
params[:installCode]
check_login_data
exit
url = @store.initial_inventory_url
continue
params[:store][:initial_inventory]
continue
 params[:store][:initial_inventory].present?
@store.initial_inventory_url
@store.initial_inventory
@store
continue
 params[:store][:initial_inventory].present?
params[:store][:initial_inventory]
[:store][:initial_inventory]
params
continue
exit
pp params
continue
exit
reg
cad
reg.class.where(cad)
reg.class.where(cad).first
reg
object
object.id
continue
exit
continue
exit
continue
id = vinculate_relations(attr.first, attr.last)
new_reg
new
attr.first
is_relation_object(attr.first)
exit
continue
values[:object]
exit
continue
klass
continue
klass
continue
value = values[:object].first.second
reference = values[:object].first.first
/_id/.match(attribute).present?
attribute != 'store_id'
attribute = values[:object].first.first
is_relation_object(values[:object].first.first)
is_relation_object(attribute)(values[:object].first.first)
values[:object].first.first
values[:object].first
values[:object]
values
new_reg
klass
continue
exit
pp params["users"].each{ |key, values| puts key["object"]}
pp params["users"].each{ |key, values| puts key[:object]}
hello[:object]
hello
hello = params["users"].each{ |key, values| values}
pp params["users"].each{ |key, values| puts values}
pp params["users"].each{ |key, values| puts key}
pp params["users"].each{ |key, values| puts values}
params["users"].each{ |key, values| puts values}
"users".singularize.camelize.constantize
params["users"].each{ |key, values| puts key}
params["users"].each{ |key, values| puts values}
params["users"].each{ |key, values| puts value}
params["users"].each{ |key, values| puts key}
params["users"].each{ |key, values| puts key, puts value}
params["users"].each{ |key, values| [puts key, puts value]}
params["users"]
@ids_references["user"]
@ids_references["users".singularize]
@ids_references["users".singularize] = {}
@ids_references["users".singularize]
@ids_references = {}
@ids_references
@ids_references["users".singularize]
"users".singularize
table_name.singularize
tables_orders.each{ |table| puts table }
tables_orders
code == Store.find(params[:storeId]).install_code
Store.find(params[:storeId]).install_code
Store.find(params[:storeId]).install_code)
code
code = BCrypt::Password.new(params[:installCode])
BCrypt::Password.new(params[:installCode])
params[:po]
params[:installCode]
pp params[:installCode]
pp params[:storeId].install_code
pp params[:storeId][:install_code]
pp params[:storeId]
pp params[:po][:users]
pp params[:users]
pp params[:installCode]
pp params["install_code"]
pp params[:install_code]
pp params[:po]
pp params
params
parameters
exit
store_with_install_code.id
store_with_install_code = Store.where(install_code: self.install_code).first
my_store_id = self.id
Store.where(install_code: self.install_code).first
Store.where(install_code: self.install_code).first.present?
continue
response_hash[:envelope][:body][:cancel_response][:cancel_result][:cod_estatus]
response_hash[:envelope][:body][:cancel_response][:cancel_result]
response_hash[:envelope][:body][:cancel_response][:cancel_result][:cod_estatus]
continue
receipt
exit
response_hash[:envelope][:body][:cancel_response][:cancel_result][:cod_estatus]
response_hash[:envelope][:body][:cancel_response][:cancel_result]
response_hash[:envelope][:body][:cancel_response]
response_hash[:envelope][:body]
response_hash[:envelope[:body]
response_hash[:envelope]
response_hash
receipt
continue
exit
bill
pp bill.tickets.first.payments.first.bill
bill.payments
bill.payment
bill.payments
bill
pp bill.tickets.first.payments.first.bill
