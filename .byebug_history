exit
date
date = Date.parse(date[:date])
real_date = Date.parse(date[:date])
date[:date]
date
exit
current_user.store.tickets.where(created_at: date.midnight..date.end_of_day) == []
current_user.store.tickets.where(created_at: date.midnight..date.end_of_day)
date += 1.day
date
current_user.store.tickets.where(created_at: date.midnight..date.end_of_day)
date += 1.day
date
@cash[1]
@cash[1] += a
@cash[1]
a = 5
@cash = ['Efectivo', 0]
pp Ticket.first
Ticket.first
pp Ticket.first.store_movements.first
Ticket.first.store_movements.first
Ticket.first.store_movements
@month_tickets.countT
@month_tickets = current_user.store.tickets.where(created_at: date.beginning_of_month.midnight..Time.now)
Ticket.first.created_at.class
Ticket.first.created_at
Time.now
date.beginning_of_month.midnight
date.midnight
date.beginning_of_month.to_datetime
date.beginning_of_month
date.begining_of_month
begining_of_monthdate
date.month_begining_of_month
date.month
date
pp PaymentForm.all
PaymentForm.all
PaymentForm.all.each do |pay|
Payment.first
current_user.store.tickets.where(created_at: date.midnight..date.end_of_day)P
date
current_user.store.tickets.where(created_at: date)
date = Date.parse(params[:date])
continue
exit
Ticket.laste
current_user.store.tickets.where(created_at: date)
date = Date.parse(params[:date])
current_user.store.tickets.where('created_at ?' > params[:date].to_date)
current_user.store.tickets.where(created_at: params[:date].to_date)
params[:date].to_date
params[:date]
current_user.store.tickets.where(created_at: params[:date])
current_user.store.tickets
current_user
params[:date]
exit
params
continue
exit
(self.classification = 'de tienda' || self.classification = 'especial')
exit
ChangesToTable.where(table: self.class.name.downcase.pluralize, web_id: self.id) == []
ChangesToTable.where(table: self.class.name.downcase.pluralize, web_id: self.id)
ChangesToTable.where(table: self.class.name.downcase.pluralize, web_id: self.id).count > 0
continue
prospect
@prospect
continue
exit
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).first.update(store: store)
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).first
store = BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).first.prospects.first.store
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).first.prospects.first.store
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).first.prospects.first
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).first.prospects.store
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).first.prospects
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).first
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc'])
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).prospects
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).prospects.first
BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc'])
BillingAddress.where(store: @store, rfc: params['prospect_rfc'])
BillingAddress.where(business_name: store: @store, rfc: params['prospect_rfc'])
BillingAddress.where(business_name: params['prospect_name'], store: @store, rfc: params['prospect_rfc'])
continue
exit
continue
@prospect.billing_address
@prospect
continue
exit
Store.find(12).prospects.each do |p|
Store.find(12).prospects.where(billing_address: nil).count
Store.find(12).prospects.where(billing_address: nil)
Store.find(12).prospects
bl.first.prospects.count
bl.first.prospects
bl.first
bl
bl = BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc'])
bl = BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).prospects
bl = BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc'])
bl = BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc']).count
bl = BillingAddress.where(business_name: params['prospect_name'], rfc: params['prospect_rfc'])
Prospect.where(legal_or_business_name: params['prospect_name'])
Prospect.where(legal_or_business_name: params['params['prospect_name']]
pp Prospect.last
Prospect.last
bl = BillingAddress.where(business_name: params['prospect_name'], store: @store, rfc: params['prospect_rfc'])
continue
@prospect
continue
@prospect.billing_address
@prospect
continue
bl.count
bl = BillingAddress.where(business_name: params['prospect_name'], store: @store, rfc: params['prospect_rfc'])
params
exit
params[:tickets]
exit
params
continue
exit
@objects
@rows
continue
@rows
continue
exit
hash["sat_unit_description"] = Service.find_by_unique_code(params["unique_code"][n].split(' ').first).sat_unit_key.description
hash["sat_unit_key"] = Service.find_by_unique_code(params["unique_code"][n].split(' ').first).sat_unit_key.unit
Service.find_by_unique_code(params["unique_code"][n].split(' ').first).sat_key.sat_key
Service.find_by_unique_code(params["unique_code"][n].split(' ').first)
          debugger
continue
exit
params[:store][:prospects_file]
params[:store]
params[:store][:prospects]
params[:store]
params
roble@disenosdecarton.com.mx
continue
pp @rows
@rows
@bill.rows.each{ |row| }
@bill.rows
@bill
@type_of_bill_key
@discount_any
@rows
exit
BillingAddress.find_by_business_name(params['prospect_name']).prospects.first
BillingAddress.find_by_business_name(params['prospect_name']).prospects
BillingAddress.find_by_business_name(params['prospect_name'])
BillingAddress.find_by_business_name(params['prospect_name']).first.prospect
pp params
continue
exit
@rows
continue
exit
@relation_type
continue
exit
PaymentForm.find(params['payment'])
TypeOfBill.find(params["type_of_bill"])
pp params
CfdiUse.find(params['cfdi_use'])
Prospect.find(params['prospect_name']).first
BillingAddress.find(params['prospect_name'])
BillingAddress.find(params['prospect_name']).prospects.first
Store.find(params['store_name']).first
pp params
continue
exit
pp params["sat_unit_key"][0]
pp params["quantity"][0]
pp params["quantity"].length
pp params
exit
params["tickets"].first
params["tickets"]
pp params
exit
pp params
Product.find_by_unique_code(params["unique_code"][0].split(' ').first).sat_unit_key.unit
Product.find_by_unique_code(params["unique_code"][0].split(' ').first).sat_unit_key
Product.find_by_unique_code(params["unique_code"][0].split(' ').first).sat_key.sat_key
Product.find_by_unique_code(params["unique_code"][0].split(' ').first).sat_key
Product.find_by_unique_code(params["unique_code"][0].split(' ').first)
params["unique_code"][0].split(' ').first
params["unit_value_hidden"][0].to_f
params["unit_value_hidden"][0]
params["product_id"]
pp params
exit
params["unique_code"][0].split(' ').first
params["unique_code"][0].split(' ')
params["unique_code"][0]
params["unique_code"].first
params["unique_code"].length
params['form'].present?
pp params
exit
pp params
exit
pp params
PaymentForm.find(1)
PaymentMethod.find(1)
PaymentForm.find(1)
pp params
exit
pp params
exit
pp params
params
exit
pp params
params
exit
pp params
exit
pp params
params
exit
CfdiUse.find(params['cfdi_use'])ex
pp params
store.business_unit.billing_address.tax_regime.
@store_name = store.business_unit.billing_address.business_name
params['store_name']
@prospect_rfc = prospect.billing_address.rfc
prospect = @prospect
@prospect = BillingAddress.find_by_business_name(params['prospect_name']).prospects.first
@store_rfc = store.business_unit.billing_address.rfc
store = @store
@store = Store.find(params['store_name']).first
@store = Store.find(params['store_name'])
@store_rfc = store.business_unit.billing_address.rfc
store.first
store
store.business_units
store.business_unit
store
@store_rfc = store.business_unit.billing_address.rfc
store = @store
@store = Store.find(params['store_name'])
TypeOfBill.find_by_key('I').key
TypeOfBill.find_by_key('I').KEY
TypeOfBill.find_by_key('I')
TypeOfBill.first
