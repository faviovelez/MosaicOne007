continue
xml_response
@incidents_hash
exit
pp @rows
@rows
 @incidents_hash
exit
'%.2f' % @rows.first["discount"]
@rows.first["discount"]
pp @rows.first["discount"]
pp @rows
@total_discount
@total
@rows
@incidents_hash
exit
response_hash = response.hash
xml_response
@incidents_hash
continue
@incidents_hash
continue
@sat_certificate
@incidents_hash
continue
hash = response_hash[:envelope][:body][:sign_stamp_response][:sign_stamp_result]
response_hash
xml_response
continue
@store
continue
@rows.count
@rows
continue
pp @rows
@rows.count
@rows
continue
@rows
continue
exit
params
continue
@rows.count
@rows
continue
@rows
@rows.count
continue
pp @rows
@rows.count
@rows
continue
o.pending_movements.count
o.pending_movements
o
new_hash
@rows
continue
objects.count
objects
exit
continue
exit
continue
exit
b_us.is_a?(BusinessUnit)
Prospect.find(1)
b_us.count
b_us
b_us = BusinessUnit.find_by_name(['Comercializadora de Cart칩n y Dise침o', 'Dise침os de Cart칩n'])
continue
objects.first
objects
@tickets == nil ? objects = @orders : objects = @tickets
@orders
    params[:tickets] == nil ? @tickets = nil : @tickets = Ticket.find(params[:tickets])
params[:orders] == nil ? @orders = nil : @orders = Order.find(params[:orders])
params
exit
amounts
total
continue
@rows.first["total"]
@rows.first
@rows
continue
@rows
continue
@rows
@rows.count
@rows
exit
pp PendingMovement.last
pp Movement.last
ppMovement.last
pp Order.last
Order.last
pp @rows
@rows
continue
exit
@greatest_payment
@greatest_payment.payment_id
@greatest_payment
continue
exit
@total_payment
@payments
@list_of_payments
@list_of_real_payments
exit
@objects.first.pending_movements.first.product.business_unit.stores.first
@objects.first.movements == []
@objects.first.movements
@objects.first
@objects.first.movements.first.product.business_unit.stores.first
@objects
continue
pm
total
continue
total
@order.pending_movements == []
continue
total
  @order.pending_movements.second.product_id
  @order.pending_movements.first.product_id
  @order.pending_movements.first
continue
prod_req_result
exit
prod_req_result
exit
prod_req_result
exit
continue
total
continue
total.include?(@order.pending_movements.second) == false
total.include?(@order.pending_movements.second)
total
pp @order.pending_movements.second.product_id
pp @order.pending_movements.second
pp @order.pending_movements
pp @order.pending_movements.second
pp @order.pending_movements.second.product_id
pp @order.pending_movements.second
pp @order.pending_movements.first
prod_req_result.first.second
pp @order.pending_movements
@order.pending_movements
@order.pending_movements == []
prod_req_result
continue
total
continue
total
continue
total
continue
prod_req_result.second
prod_req_result.first
prod_req_result
continue
prod_req_result
continue
prod_req_result
continue
pp @new_order.product_requests
pp @order.product_requests
pp @new_order.product_requests
@new_order.product_requests
pp @new_order.pending_movements
@new_order.pending_movements
pp @order.movements
@order.movements
@new_order
@order
continue
pp @order.pending_movements
pp @order.movements
pp @order.product_requests
@new_order
@order.product_requests.count
@order.product_requests
@order
@orders
continue
order_quantity > inventory.fix_quantity
exit
@order.movements
@order
continue
@product_requests.first.product_id
@product_requests.first
@product_requests.product_id
@product_requests
@product_requests.product
@product_requests.product.quantity
@product_requests.product
@product_requests.product.id
@product_requests.product
@product_requests.first
@product_requests.first.product
@product_requests.where(product: 6)
@product_requests.count
@orders.first.product_requests.count
@orders.first.product_requests
@orders.first
@orders
@product_requests
continue
exit
pp @orders.first.movements
@orders.first.movements.count
@orders.first.movements
@orders.first
@orders
@order
continue
@objects.first.movements.first.product.business_unit.stores.first
@objects.first.movements.first.product.business_unit.stores
@objects.first.movements.first.product.business_unit
@objects.first.movements.first.product
@objects.first.movements.first
@objects.first.movements
@objects.first
@objects
exit
@objects
exit
@objects
continue
CONTINUE
@stamp_original_chain
continue
@p_billing
@s_billing
continue
@s_billing
@p_billing
continue
Bill.last.receiving_company
Bill.last.issuing_company
Bill.last
BillingAddress.last
continue
@incidents_hash
continue
xml_response
continue
xml_response
continue
@incidents_hash
